*minscm.txt*    Mercurial/Git/Bazaar フロントエンド

        Copyright (c) 2009 Takeshi NISHIDA

MinSCM                                                                *minscm*

概要                            |minscm-introduction|
インストール                    |minscm-installation|
使い方                          |minscm-usage|
コマンド                        |minscm-commands|
オプション                      |minscm-options|
CHANGELOG                       |minscm-changelog|
あばうと                        |minscm-about|

==============================================================================
概要                                                     *minscm-introduction*

MinSCM は様々な SCM システム (VCS) のリポジトリを扱うプラグインです。抽象化さ
れたインターフェースにより SCM システムの違いを意識することなくリポジトリを扱
うことができます。

特徴:
  - Mercurial サポート
  - Git サポート
  - Bazaar サポート
  - 抽象化されたインターフェース
  - 多くのコマンド
  - リビジョン名の補完
  - リポジトリ情報のステータスラインでの表示


==============================================================================
インストール                                             *minscm-installation*

全てのファイルをランタイムディレクトリに配置してください。ZIPファイルを入手し
た場合は、それをランタイムディレクトリに展開してください。

ファイルの配置はは次のようになります。:
>
        <ランタイムディレクトリ>/plugin/minscm.vim
        <ランタイムディレクトリ>/autoload/minscm.vim
        <ランタイムディレクトリ>/autoload/minscm/mercurial.vim
        ...
<
それからヘルプタグファイルを更新してください。詳しくは|add-local-help|を参照してください。

==============================================================================
使い方                                                          *minscm-usage*

|minscm-commands|を参照してください。

                                                           *minscm-statusline*
                                                        *g:minscm_getStatus()*
リポジトリ情報をステータスラインに表示 ~

g:minscm_getStatus() を利用してください。(関連項目: |'statusline'|)

                                                          *minscm-fuzzyfinder*
Fuzzyfinder プラグインとの連携 ~

MinSCM は fuzzyfinder.vim の API を利用しています。以下のコマンドは
fuzzyfinder.vim に依存しています:

        :MinSCMFindFile

fuzzyfinder.vim は http://www.vim.org/scripts/script.php?script_id=1984 で入手
可能です。

==============================================================================
コマンド                                                     *minscm-commands*

全てのコマンドはカレントバッファのファイルを含むリポジトリに対して実行されます
。

MinSCM のコマンドが ! 修飾子付きで実行された場合、利用するSCMシステムの優先順
位を逆転させます。

                                                              *:MinSCMCommand*
:MinSCMCommand[!]               (デフォルトキーマッピング: \s:)

        入力した任意のコマンドを実行します。

                                                           *:MinSCMCommitFile*
:MinSCMCommitFile[!]            (デフォルトキーマッピング: \sC)

        カレントバッファのファイルをコミットします。

                使用する SCM コマンド ~
                hg  : commit
                git : commit
                bzr : commit

                                                        *:MinSCMCommitTracked*
:MinSCMCommitTracked[!]         (デフォルトキーマッピング: \s<C-c>)

        追跡されている全ファイルをコミットします。

                使用する SCM コマンド ~
                hg  : commit
                git : commit -a
                bzr : commit

                                                            *:MinSCMCommitAll*
:MinSCMCommitAll[!]             (デフォルトキーマッピング: \sc)

        カレントリポジトリの作業ディレクトリ内の全ファイルをコミットします。

        追跡されていないファイルをカレントリポジトリに追加する点が
        |:MinSCMCommitTracked| と異なります。

                使用する SCM コマンド ~
                hg  : commit -A
                git : add -a && commit -a
                bzr : add && commit

                                                             *:MinSCMCheckout*
:MinSCMCheckout[!]              (デフォルトキーマッピング: \so)

        指定したリビジョンをチェックアウトします。

                使用する SCM コマンド ~
                hg  : update
                git : checkout
                bzr : (unavailable)

                                                                *:MinSCMMerge*
:MinSCMMerge[!]                 (デフォルトキーマッピング: \sm)

        指定したリビジョンを作業ディレクトリにマージします。

                使用する SCM コマンド ~
                hg  : merge
                git : merge
                bzr : (unavailable)

                                                               *:MinSCMBranch*
:MinSCMBranch[!]                (デフォルトキーマッピング: \sb)

        新ブランチを作成します。

                使用する SCM コマンド ~
                hg  : branch
                git : checkout -b
                bzr : (unavailable)

                                                         *:MinSCMBranchDelete*
:MinSCMBranchDelete[!]          (デフォルトキーマッピング: \sB)

        既存のブランチを削除します。

                使用する SCM コマンド ~
                hg  : (unavailable)
                git : branch -d
                bzr : (unavailable)

                                                               *:MinSCMRebase*
:MinSCMRebase[!]                (デフォルトキーマッピング: \sr)

        チェンジセットを指定したリビジョンへ移動します。

                使用する SCM コマンド ~
                hg  : rebase --keep -b
                git : rebase
                bzr : (unavailable)

                                                             *:MinSCMDiffFile*
:MinSCMDiffFile[!]              (デフォルトキーマッピング: \sD)

        カレントバッファのファイルとその指定リビジョンのバージョン間で、
        (vimdiff のような) Diff モードを新規タブページで開始します。

                使用する SCM コマンド ~
                hg  : cat
                git : cat-file -p
                bzr : cat

                                                              *:MinSCMDiffAll*
:MinSCMDiffAll[!]               (デフォルトキーマッピング: \sd)

        カレントリポジトリの作業ディレクトリ内の全ファイルと指定リビジョン間の
        差分を表示します。

                使用する SCM コマンド ~
                hg  : diff
                git : diff
                bzr : diff

                                                                  *:MinSCMLog*
:MinSCMLog[!]                   (デフォルトキーマッピング: \sl)

        リビジョンの履歴を表示します。(関連項目: |g:minscm_hgLogOption|
        |g:minscm_gitLogOption| |g:minscm_bzrLogOption|)

                使用する SCM コマンド ~
                hg  : glog
                git : log
                bzr : log

                                                         *:MinSCMAnnotateFile*
:MinSCMAnnotateFile[!]          (Default mapping: \sn)

        カレントバッファのファイルの各行について、コミット情報を表示します。

        指定リビジョンのコミットで修正された行と最初のコミットで追加された行は
        ハイライト表示されます。

                Used SCM commands ~
                hg  : annotate -nudq
                git : blame
                bzr : annotate --all --long

                                                               *:MinSCMStatus*
:MinSCMStatus[!]                (デフォルトキーマッピング: \ss)

        変更のあるファイルのリストを表示します。

                使用する SCM コマンド ~
                hg  : status
                git : diff --name-status && ls-files --exclude-standard -o
                bzr : status

                                                                 *:MinSCMGrep*
:MinSCMGrep[!]                  (デフォルトキーマッピング: \sg)

        指定パターンで検索し、|quickfix|リストを作成します。

                使用する SCM コマンド ~
                hg  : grep -n
                git : grep -n -e
                bzr : (unavailable)

                                                         *:MinSCMLoadModified*
:MinSCMLoadModified[!]          (Default mapping: \s!)

        変更されている全ファイルを vim に読み込みます。無関係のバッファは
        (:bdelete で)アンロードされます。

                使用する SCM コマンド ~
                hg  : status -mn
                git : ls-files -m
                bzr : status -SV

                                                              *:MinSCMLoadAll*
:MinSCMLoadAll[!]               (デフォルトキーマッピング: \s<CR>)

        追跡されている全ファイルを vim に読み込みます。無関係のバッファは
        (:bdelete で)アンロードされます。

                使用する SCM コマンド ~
                hg  : locate -f
                git : ls-files
                bzr : ls

                                                             *:MinSCMFindFile*
:MinSCMFindFile[!]              (デフォルトキーマッピング: \sf)

        Fuzzyfinder を使って追跡されている全ファイルの中からファイルを選択
        して開きます。(関連項目: |minscm-fuzzyfinder|)

                使用する SCM コマンド ~
                hg  : locate -f
                git : ls-files
                bzr : ls

==============================================================================
オプション                                                    *minscm-options*

                                                   *g:minscm_availableScms*  >
  let g:minscm_availableScms = ['git', 'mercurial', 'bazaar']
<
        利用したい SCM システム名のリストです。

        複数のSCMシステムのリポジトリが見つかった場合、カレントとなるリポジト
        リの優先順位は g:minscm_availableScms の順に準じます。

                                                       *g:minscm_mapLeader*  >
  let g:minscm_mapLeader = '\s'
<
        MinSCM コマンドへマップされるキー列のプレフィックスです。

                                              *g:minscm_mapLeaderAlternate*  >
  let g:minscm_mapLeaderAlternate = '\S'
<
        MinSCM コマンドへマップされるキー列のプレフィックスです。

        このプレフィックスから実行されたコマンドでは、利用する SCM システムの
        優先順位が逆転します。

                                                   *g:minscm_mapKeyCommand*  >
  let g:minscm_mapKeyCommand       = ':'
<                                               *g:minscm_mapKeyCommitFile*  >
  let g:minscm_mapKeyCommitFile    = 'C'
<                                            *g:minscm_mapKeyCommitTracked*  >
  let g:minscm_mapKeyCommitTracked = '<C-c>'
<                                                *g:minscm_mapKeyCommitAll*  >
  let g:minscm_mapKeyCommitAll     = 'c'
<                                                 *g:minscm_mapKeyCheckout*  >
  let g:minscm_mapKeyCheckout      = 'o'
<                                                    *g:minscm_mapKeyMerge*  >
  let g:minscm_mapKeyMerge         = 'm'
<                                                   *g:minscm_mapKeyBranch*  >
  let g:minscm_mapKeyBranch        = 'b'
<                                             *g:minscm_mapKeyBranchDelete*  >
  let g:minscm_mapKeyBranchDelete  = 'B'
<                                                   *g:minscm_mapKeyRebase*  >
  let g:minscm_mapKeyRebase        = 'r'
<                                                 *g:minscm_mapKeyDiffFile*  >
  let g:minscm_mapKeyDiffFile      = 'D'
<                                                  *g:minscm_mapKeyDiffAll*  >
  let g:minscm_mapKeyDiffAll       = 'd'
<                                                      *g:minscm_mapKeyLog*  >
  let g:minscm_mapKeyLog           = 'l'
<                                             *g:minscm_mapKeyAnnotateFile*  >
  let g:minscm_mapKeyAnnotateFile  = 'l'
<                                                   *g:minscm_mapKeyStatus*  >
  let g:minscm_mapKeyStatus        = 's'
<                                                     *g:minscm_mapKeyGrep*  >
  let g:minscm_mapKeyGrep          = 'g'
<                                             *g:minscm_mapKeyLoadModified*  >
  let g:minscm_mapKeyLoadModified  = '!'
<                                                  *g:minscm_mapKeyLoadAll*  >
  let g:minscm_mapKeyLoadAll       = '<CR>'
<                                                 *g:minscm_mapKeyFindFile*  >
  let g:minscm_mapKeyFindFile      = 'f'
<
        MinSCM コマンドへマップされるキー列の、|g:minscm_mapLeader|や
        |g:minscm_mapLeaderAlternate|に続く部分です。

                                                     *g:minscm_hgLogOption*  >
  let g:minscm_hgLogOption  = '--style compact'
<                                                   *g:minscm_gitLogOption*  >
  let g:minscm_gitLogOption = '--all --graph --pretty=format:''%h (%ci) %s'''
<                                                   *g:minscm_bzrLogOption*  >
  let g:minscm_bzrLogOption = '--line'
<
        各 SCM システムの log コマンドのオプションです。


==============================================================================
あばうと                       *minscm-about* *minscm-contact* *minscm-author*

作者:       Takeshi NISHIDA <ns9tks@DELETE-ME.gmail.com>
ライセンス: MIT Licence
URL:        http://www.vim.org/scripts/script.php?script_id=2637
            http://bitbucket.org/ns9tks/vim-minscm/

バグや要望など ~

http://bitbucket.org/ns9tks/vim-minscm/issues/ に登録してもらえると助かります。

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:

